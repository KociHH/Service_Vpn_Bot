import io
import logging
import os
import random
import re
import subprocess
import zipfile
from db.middlewares.middle import async_session
from aiogram.types import InputFile, BufferedInputFile, ReplyKeyboardRemove, CallbackQuery, InlineKeyboardButton, \
    InlineKeyboardMarkup
from aiogram.utils import markdown
from sqlalchemy import select, delete, func
from sqlalchemy.ext.asyncio import AsyncSession
from db.tables import Images, Subscription, images_dao, sub_dao

logger = logging.getLogger(__name__)
UNRAR_PATH = r"C:\unrar\UnRAR.exe"
admin_id = os.getenv('ADMIN_ID')


class ImageProcessing:
    def __init__(self):
        self.i = 0

    async def db_checking_img_data(self, message, img_data: str, file_name: str):
        output_image = await images_dao.get_one(Images.image == img_data)
        if output_image:
            await message.answer(f"–¢–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ {markdown.hcode(file_name)} —É–∂–µ –∏–º–µ–µ—Ç—Å—è, —è –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—é ->")
            return False
        return True

    async def save_img_to_db(self, images):
        try:
            saved = len(images)
            for name, img_data in images:
                while True:
                    existing_img = await images_dao.get_one(Images.image == img_data)
                    if existing_img:
                        logger.info("–ï—Å—Ç—å –ø–æ—Ö–æ–∂–∏–π qrcode –ø—Ä–æ–ø—É—Å–∫–∞—é..")
                        saved -= 1
                        break

                    image_created = await images_dao.create({
                        "name": name,
                        "image": img_data,
                    })

                    if not image_created:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ qrcode (name: {name})")
                        saved -= 1
                    break

            logger.info(f'–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –∏–∑–æ–±.; –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(images) - saved} –∏–∑–æ–±.')
            return
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ save_img_to_db: {e}')
            return


    async def image_extract(self, file_bytes: bytes, file_name: str, message):
        try:
            images = []
            file_stream = io.BytesIO(file_bytes)

            if file_name.endswith('.zip'):
                with zipfile.ZipFile(file_stream, 'r') as archive:
                    for file in archive.namelist():
                        if file.endswith('/'):
                            continue
                        if file.lower().endswith((".png", ".jpg", ".jpeg")):
                            if await self.db_checking_img_data(
                                file_name=file,
                                img_data=img_file.read(),
                                message=message
                            ):
                                self.i += 1
                                with archive.open(file) as img_file:
                                    images.append((file, img_file.read()))

            elif file_name.endswith('.rar'):
                rar_path = 'rar_save_.rar'
                with open('rar_save_.rar', 'wb') as save:
                    save.write(file_bytes)

                command_list = [UNRAR_PATH, 'l', rar_path]
                process = subprocess.run(command_list, capture_output=True, text=True)
                file_list_ = process.stdout.splitlines()

                for line in file_list_:
                    match = re.search(r'\s(\S+\.\w+)$', line)
                    if not match:
                        continue
                    file_name = str(match.group(1))
                    file_full_name = str(os.path.basename(file_name))
                    if 'rar_save_.rar' in file_full_name:
                        continue

                    if file_name.lower().endswith((".png", ".jpg", ".jpeg")):
                        self.i += 1
                        logger.info(f'–ò–∑–≤–ª–µ–∫–∞–µ–º - {file_full_name}, –ö–æ—Ç–æ—Ä—ã–π {self.i}')
                        command_extract = [UNRAR_PATH, "p", rar_path, file_name]
                        extract_process = subprocess.Popen(command_extract, stdout=subprocess.PIPE)
                        img_data, _ = extract_process.communicate()

                        if img_data:
                            if await self.db_checking_img_data(
                                file_name=file_full_name,
                                img_data=img_data,
                                message=message
                            ):
                                images.append((file_full_name, img_data))
                    else:
                        await message.answer(f"–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

                os.remove(rar_path)
            return images, self.i

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ image_extract: {e}')
            return [], self.i


    async def count_images_db(self, message: CallbackQuery):
        try:
            count = await len(images_dao.get_all_column_values(Images.id))

            if count == 0:
                await message.answer(
                    '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç.–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.',
                )
            else:
                await message.answer(
                    f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Å–µ–≥–æ –≤ –ë–î = {markdown.hbold(count)}.',
                )
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞: {e}')


    async def delete_code(self, message, id_img: int):
        delete_img = await self.image_dao.delete(Images.id == id_img)
        if delete_img:
            logger.info('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')

        else:
            if isinstance(message, CallbackQuery):
                await message.message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport')
            else:
                await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport')


    async def send_crcode(self, message: CallbackQuery, user_id: int):
        package_sub = []
        try:
            src = await self.image_dao.get_one(Subscription.user_id == user_id)
            if src:
                start_date = src.start_date
                end_date = src.end_date
                package_sub.append((start_date, end_date))

            output_image = await self.image_dao.get_one(Images.id is not None)

            if output_image:
                name = output_image.name
                id_img = output_image.id
                image_stream = output_image.image
                image_file = BufferedInputFile(image_stream, filename="AMMO_VPN.jpg")

                text = markdown.text(
                    f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"

                    "I –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard\n"
                    "—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - https://www.wireguard.com/install/\n"
                    "II –í–æ–π–¥—è –≤ WireGuard –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '+' –∏ —Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –≤—ã–¥–∞–ª –±–æ—Ç\n\n"

                    "I –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ VPN —Å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏\n"
                    "II –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1 –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö,\n"
                    "–ª—É—á—à–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π vpn –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
                    "III –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ VPN, –∫–æ–≥–¥–∞ –æ–Ω –≤–∞–º –Ω–µ –Ω—É–∂–µ–Ω\n\n"

                    "–ñ–µ–ª–∞–µ–º –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AMMO VPN!",
                )

                await message.message.answer_photo(
                    photo=image_file,
                    caption=text
                )

                return name, id_img, package_sub
            else:
                name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                id_img = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                keyboard = InlineKeyboardButton(
                    text="ü§ù –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url='https://t.me/tripleswaga'
                )
                button_support = InlineKeyboardMarkup(inline_keyboard=[[keyboard]])
                await message.message.answer(
                    text=
                    f'–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π.\n'
                    f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –Ω–∞—Å –∏ –º—ã –≤—ã–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–ª—é—á.',
                    reply_markup=button_support
                )
                return name, id_img, package_sub


        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞: {e}')
            return