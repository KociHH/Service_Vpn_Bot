from aiogram import F
from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.utils import markdown
from db.middlewares.middle import logger
from db.tables import PaymentHistory, User
from keyboards.inline_keyboard.common import Main, Main_menu, Month_kb, return_kb_support, \
    Month, info2, info, info3, info_price_249, info_price_579, info_price_979, Other
from keyboards.inline_keyboard.pay import CashMultiBt, CashMenu
from settings import BotParams
from kos_Htools.sql.sql_alchemy.dao import BaseDAO
from sqlalchemy.ext.asyncio import AsyncSession
from utils.work import url_support
from utils.other import create_slide_payments_bt, OperationNames
import logging


logger = logging.getLogger(__name__)


router = Router()

text_answer_one = markdown.text(
    f'üóùVPN –Ω–∞ {info.month} –º–µ—Å—è—Ü\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')

text_answer_two = markdown.text(
    f'üóùVPN –Ω–∞ {info2.month} –º–µ—Å—è—Ü–µ–≤\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info2.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')

text_answer_tree = markdown.text(
    f'üóùVPN –Ω–∞ {info3.month} –º–µ—Å—è—Ü–µ–≤\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info3.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')


async def handle_month_subscription(call: CallbackQuery, data):
    if data == Month.One_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA
        text = text_answer_one
    elif data == Month.Two_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA_TWO
        text = text_answer_two
    elif data == Month.Tree_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA_TREE
        text = text_answer_tree
    else:
        return
    
    await call.message.answer(
        text=text,
        reply_markup=CashMultiBt(callback_data_month)
    )


@router.callback_query(F.data.in_((Month.One_month, Month.Two_month, Month.Tree_month)))
async def month_processing(call: CallbackQuery, db_session: AsyncSession):
    user_id = call.from_user.id
    try:
        user_dao = BaseDAO(User, db_session)
        existing_user = await user_dao.get_one(User.user_id == user_id)

        if existing_user:
            await call.answer()
            await handle_month_subscription(call, call.data)
        else:
            return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ : {e}")
        await call.answer(f"‚öôÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º", show_alert=True)


@router.callback_query(F.data == Main.MAIN)
async def start_deep_link(call: CallbackQuery):

    text = markdown.text(
        f"{markdown.hbold(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}!')}\n\n"
        f"{markdown.hbold(f'üóùÔ∏è –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {BotParams.name_project} VPN:')}\n",
        "‚Äî –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ì–±–∏—Ç/—Å",
        "‚Äî –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞",
        "‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n",
        f"{markdown.hbold(f'üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ –∏ –°–ë–ü')}",
        sep='\n',
    )
    await call.message.edit_text(text, reply_markup=Main_menu())


@router.callback_query(F.data.in_((Main.purchase, Main.extend)))
async def purchase(call: CallbackQuery):
    await call.answer()
    if call.data == Main.extend:
        message = call.message.answer
    else:
        message = call.message.edit_text

    await message(
        text=markdown.text(
            f'‚è≥VPN {info_price_249.month} –º–µ—Å—è—Ü\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_249.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'

            f'‚õìÔ∏èVPN {info_price_579.month} –º–µ—Å—è—Ü–∞\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_579.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'

            f'üå™Ô∏èVPN {info_price_979.month} –º–µ—Å—è—Ü–µ–≤\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_979.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû''‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
            sep='\n'
        ),
        reply_markup=Month_kb()
    )


@router.callback_query(F.data == Main.advantages)
async def purchase_advantages(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text=markdown.text(
            f"üóùÔ∏è {BotParams.name_project} VPN:\n\n"
            "üåë I C–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ì–±–∏—Ç/—Å\n\n"
            "üëÅ‚Äçüó® II –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤ –∏ —Ç. –¥.\n",
            f"üíª III –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å {BotParams.name_project} VPN –¥–∞–µ—Ç WireGuard, –∑–∞—â–∏—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            sep='\n'),
        reply_markup=return_kb_support(),
    )


@router.callback_query(F.data == Main.Support)
async def purchase_Support(call: CallbackQuery):
    await call.answer()
    await call.message.answer(
        text=markdown.text(
            f'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {markdown.hlink(title=BotParams.name_project, url=url_support)}\n\n',
        ),
        reply_markup=return_kb_support())


@router.callback_query(F.data.startswith(Other.slide))
async def slide_processing(call: CallbackQuery, db_session: AsyncSession):    
    try:
        data_args = call.data.split("_")
        operation_name = data_args[2]
        user_id = data_args[3]
        slide_count = int(data_args[4])
        print(f"call: {call.data} user_id:{user_id} operation_name: {operation_name} slide_count: {slide_count}")

        if user_id == 'None':
            user_id = None
        else:
            user_id = int(user_id)

        if not any([slide_count, operation_name]):
            logger.error(f"–ù–µ—Ç —á–∏—Å–ª–∞ —Å–ª–∞–π–¥–∞ –ª–∏–±–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω operation_name: {data_args}")
            return

        await call.answer()
        await create_slide_payments_bt(
            db_session,
            user_id,
            call,
            slide_count,
            operation_name,
            slide_count
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ slide_processing: {e}")
        return

@router.callback_query(F.data == "empty_button")
async def empty_button(call: CallbackQuery):
    await call.answer("Empty button")