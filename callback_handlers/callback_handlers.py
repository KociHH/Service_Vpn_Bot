import traceback
from typing import Optional, Union
from aiogram import F
from aiogram import Router
from aiogram.enums import ChatAction
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils import markdown
from FSM.states import Email
from FSM.validators_and_def import check_email, process_callback_data
from db.middlewares.middle import logger
from db.tables import user_dao, User
from keyboards.inline_keyboard.main_inline_keyboard import Main, Main_menu, Month_kb, return_kb_support, \
    Month, info2, info, info3, info_price_249, info_price_579, info_price_979, MonthCD
from keyboards.inline_keyboard.pay_inline_keyboard import CashMultiBt, CashMenu
from keyboards.reply_keyboard.state_reply import build_net_keyboard
from settings import DEFAULT_EMAIL, BotParams
from typing import Any

router = Router()

text_answer_one = markdown.text(
    f'üóùVPN –Ω–∞ {info.month} –º–µ—Å—è—Ü\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')

text_answer_two = markdown.text(
    f'üóùVPN –Ω–∞ {info2.month} –º–µ—Å—è—Ü–∞\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info2.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')

text_answer_tree = markdown.text(
    f'üóùVPN –Ω–∞ {info3.month} –º–µ—Å—è—Ü–µ–≤\n\n'
    f'üìÑ–¶–µ–Ω–∞: {info3.price} ‚ÇΩ\n\n'
    f'üë§–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'
    '‚öôÔ∏è–í—Å√´ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è', sep='\n')

text = markdown.text(
    markdown.hbold("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"),
    f"üì® –í–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n\n"
    f"üí° E—Å–ª–∏ –≤–∞–º —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", sep='\n'
)


# def valid_email_message_text(text: str) -> bool:
#     return bool(re.match(r"[^@]+@[^@]+\.[^@]+", text))


async def status_admin(user_id: int) -> str:
    user_id = str(user_id)

    if user_id in BotParams.admin_ids_str:
        return 'admin'
    return 'user'


async def upsert_user(
        call_and_message: Union[CallbackQuery, Message],
        email: Optional[str] = None
):

    name_user = call_and_message.from_user.full_name
    user_id = call_and_message.from_user.id

    existing = user_dao.get_one(User.user_id == user_id)

    if existing:
        updater = user_dao.update(
            User.user_id == user_id,
            {
                "user_id": user_id,
                "user_name": f"@{call_and_message.from_user.username}" if call_and_message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
                "full_name": call_and_message.from_user.full_name or "–ù–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫" if not call_and_message.from_user.full_name else name_user,
                "email": email,
                "admin_status": await status_admin(user_id),
            },
        )
        if not updater:
            logger.error(f"–ù–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —é–∑–µ—Ä {user_id}")
            return

    else:
        user_create = user_dao.create({
            "user_id": user_id,
            "user_name": f"@{call_and_message.from_user.username}" if call_and_message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "full_name": call_and_message.from_user.full_name or "–ù–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫" if not call_and_message.from_user.full_name else name_user,
            "email": email,
            "admin_status": await status_admin(user_id),
        })
        if not user_create:
            logger.error(f"–ù–µ —Å–æ–∑–¥–∞–ª—Å—è —é–∑–µ—Ä {user_id}")
            return


async def _prompt_for_email(call: CallbackQuery, state: FSMContext, text: str):
    await state.set_state(Email.email)
    await call.answer()
    await call.message.answer(
        text=text,
        reply_markup=build_net_keyboard(),
    )
    await process_callback_data(call, state)


@router.callback_query(MonthCD.filter())
async def email_from(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    try:

        existing_user = await user_dao.get_one(User.user_id == user_id)

        if existing_user:
            if existing_user.email is None:
                await _prompt_for_email(call, state, text)

            else:
                await call.answer()
                await process_callback_data(call, state)
                await handle_month_subscription(call, state)
                await state.clear()

        else:
            await upsert_user(
                call_and_message=call,
                email=None
            )

            again_existing_user = await user_dao.get_one(User.user_id == user_id)

            if again_existing_user and again_existing_user.email is None:
                await _prompt_for_email(call, state, text)
            else:
                await call.answer('üõ† –ü—Ä–æ–±–ª–µ–º—ã –º–º–º...', show_alert=True)

    except Exception as e:
        error_message = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞: {error_message} –∏ {e}")
        await call.answer(f"‚öôÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º", show_alert=True)


@router.message(StateFilter(Email.email), F.text.casefold() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def no_message(message: Message, state: FSMContext):
    await message.answer('–£—Å–ø–µ—à–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.update_data(email=DEFAULT_EMAIL)
    await upsert_user(
        call_and_message=message,
        email=DEFAULT_EMAIL,
    )

    await handle_month_subscription(message, state)
    await state.clear()
    return


@router.message(StateFilter(Email.email), F.text)
async def email_update(message: Message, state: FSMContext, ):
    email = message.text
    try:
            await message.bot.send_chat_action(
                chat_id=message.chat.id,
                action=ChatAction.TYPING,
            )
            await check_email(email=email, message=message)
            await upsert_user(
                call_and_message=message,
                email=email
            )

            await message.answer(f"–¢–≤–æ–π email {email} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=ReplyKeyboardRemove())
            await handle_month_subscription(message, state)
            await state.clear()

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}')


async def handle_month_subscription(call_or_message: Union[CallbackQuery, Message], state: FSMContext):
    if isinstance(call_or_message, CallbackQuery):
        data = call_or_message.data
    elif isinstance(call_or_message, Message):
        state_data = await state.get_data()
        data = state_data.get("action")
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ–º—ã–π –∑–∞–ø—Ä–æ—Å CallbackQuery –∏–ª–∏ Message")

    if not data:
        await call_or_message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    if isinstance(data, str):
        try:
            callback_dict = {k: int(v) if k == 'month' else v for k, v in (item.split(':') for item in data.split(','))}
        except Exception as e:
            await call_or_message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –í handle_month_subscription: {e}",
                show_alert=True)
            return

    elif isinstance(data, dict):
        callback_dict = data

    else:
        await call_or_message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    if 'month' in callback_dict:
        callback_dict['action'] = Month(callback_dict['month'])
    else:
        await call_or_message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—è—Ü–µ.", show_alert=True)
        return

    required_fields = ['month', 'action']
    if not all(field in callback_dict for field in required_fields):
        missing_fields = [field for field in required_fields if field not in callback_dict]
        await call_or_message.answer(f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}.")
        return

    try:
        month_data = MonthCD(**callback_dict)
        action = month_data.action
    except Exception as e:
        await call_or_message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –í handle_month_subscription: {str(e)}",
            show_alert=True
        )
        return

    if action == Month.One_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA
    elif action == Month.Two_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA_TWO
    elif action == Month.Tree_month:
        callback_data_month = CashMenu.MOVEMENT_OPLATA_TREE
    else:
        if isinstance(call_or_message, CallbackQuery):
            await call_or_message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        elif isinstance(call_or_message, Message):
            await call_or_message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return
    
    await handle_month(
        call_or_message,
        callback_data_month,
    )

async def handle_month(
        call_or_message: Union[CallbackQuery, Message],
        callback_data: Any,
        ):
    if isinstance(call_or_message, CallbackQuery):
        await call_or_message.answer()
        message = call_or_message.message
    elif isinstance(call_or_message, Message):
        message = call_or_message
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ–º—ã–π –∑–∞–ø—Ä–æ—Å CallbackQuery –∏–ª–∏ Message")

    try:
        await message.answer(
            text=text_answer_one,
            reply_markup=CashMultiBt(callback_data)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.callback_query(Main.MAIN)
async def start(call: CallbackQuery):

    text = markdown.text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.full_name}!\n\n"
        f"üóùÔ∏è –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {BotParams.name_project} VPN:\n",
        "üåë I –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ì–±–∏—Ç/—Å\n",
        "üëÅ‚Äçüó® II –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n",
        "üíª III –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n",
        "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ –∏ –°–ë–ü",
        sep='\n',
    )
    await call.message.edit_text(text, reply_markup=Main_menu())


@router.callback_query(Main.purchase)
async def purchase(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text=markdown.text(
            f'‚è≥VPN {info_price_249.month} –º–µ—Å—è—Ü\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_249.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'

            f'‚õìÔ∏èVPN {info_price_579.month} –º–µ—Å—è—Ü–∞\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_579.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû\n\n'

            f'üå™Ô∏èVPN {info_price_979.month} –º–µ—Å—è—Ü–µ–≤\n'
            '–û–ø–∏—Å–∞–Ω–∏–µ:\n'
            f'–¶–µ–Ω–∞: {info_price_979.price}\n'
            f'–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ‚àû''‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä',
            sep='\n'
        ),
        reply_markup=Month_kb()
    )


@router.callback_query(Main.advantages)
async def purchase_advantages(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(
        text=markdown.text(
            f"üóùÔ∏è {BotParams.name_project} VPN:\n\n"
            "üåë I C–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ì–±–∏—Ç/—Å\n\n"
            "üëÅ‚Äçüó® II –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤ –∏ —Ç. –¥.\n",
            f"üíª III –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å {BotParams.name_project} VPN –¥–∞–µ—Ç WireGuard, –∑–∞—â–∏—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            sep='\n'),
        reply_markup=return_kb_support(),
    )


@router.callback_query(Main.Support)
async def purchase_Support(call: CallbackQuery):
    await call.answer()
    await call.message.answer(
        text=markdown.text(
            f'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {markdown.hlink("AMMO VPN", url="https://t.me/ammosupport")}\n\n',
        ),
        reply_markup=return_kb_support())
