import logging

import asyncio
import os
from datetime import datetime, timezone
from typing import Union

import pytz
from aiogram import F
from aiogram.client import bot
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import markdown
from aiogram import Router
from dotenv import load_dotenv
from environs import Env
from sqlalchemy import update
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

import settings
from bd_api.middle import logger
# from bd_api.middlewares.db_sql import info_month
from bd_api.middlewares.sa_tables import User, UserUpdater, Subscription, subscriber
from callback_handlers.callback_handlers import upsert_user, purchase
# from callback_handlers.pay_func.pay_yookassa import check_one, \
#     check_tree, check_two
from callback_handlers.pay_func.pay_yookassa import check
from keyboards.inline_keyboard.pay_inline_keyboard import CashCK, CashMenu, info_month

from keyboards.inline_keyboard.main_inline_keyboard import info, info3, info2, MainCD, Main
from utils.date_moscow import get_current_date

router = Router(name=__name__)
current_time = get_current_date(False)
load_dotenv()


@router.callback_query(CashCK.filter())
async def cash_ck(call: CallbackQuery, callback_data: CashCK, state: FSMContext, db_session: AsyncSession):
    await call.message.bot.send_chat_action(
        chat_id=call.message.chat.id,
        action=ChatAction.TYPING
    )
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ info_month

        subscription = info_month(
            price=0.0,
            month=0,
            description="",
            callback_data=callback_data,
            MOVEMENT_OPLATA=CashMenu.MOVEMENT_OPLATA,
            MOVEMENT_OPLATA_TWO=CashMenu.MOVEMENT_OPLATA_TWO,
            MOVEMENT_OPLATA_TREE=CashMenu.MOVEMENT_OPLATA_TREE
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ action —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CashMenu
        if callback_data.action in [
            CashMenu.MOVEMENT_OPLATA,
            CashMenu.MOVEMENT_OPLATA_TWO,
            CashMenu.MOVEMENT_OPLATA_TREE
        ]:

            price, month, description = subscription.change_month_price()
            markup = await subscription.oplatas(call.message, db_session)
            print(month)


            await call.answer()
            await call.message.answer(
                text=(
                    f'{markdown.hbold(description)}\n\n'
                    '–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:'
                ),
                reply_markup=markup
            )

            await state.update_data(actions=callback_data.action, action_count=0,  count_payment=0, month=int(month))

        else:
            await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception as e:
        error_msg = f'–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}'
        await call.message.answer(
            f"{error_msg}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(lambda i: i.data.startswith('test_check_'))
async def check_handler(call: CallbackQuery, db_session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    month = data.get("month")
    counting = data.get("count_payment", 0)
    print(month, counting)

    if counting > 0:
        await call.answer('‚úÖ –í—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        return

    if month is None:
        await call.answer("‚ùó –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã.")
        return

    await call.message.bot.send_chat_action(
        chat_id=call.message.chat.id,
        action=ChatAction.TYPING
    )

    try:
        await call.answer()


        if not call.data.startswith("test_check_"):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback_data: {call.data}")
            await call.answer(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )
            return

        payment_id = call.data[len("test_check_"):]
        check_ = await check(payment_id, db_session, message_callback=call, month=month, date=get_current_date(True))

        if not check_:
            await call.message.answer(
                '‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚ùó\n\n'
                '–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport'
            )
            return

        button = InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ",
                        callback_data="get_file"
                    )
                ]]
            )

        await call.message.answer(
            markdown.text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                sep="\n"
                ),
            reply_markup=button
        )

        logger.info(
                f"Current Date and Time (MSK): {current_time}\n"
                f"Current User's Login: {call.from_user.username}\n"
                f"Checking payment ID: {payment_id}\n"
                f"User ID: {call.from_user.id}"
        )
        counting += 1
        await state.update_data(count_payment=counting)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}')
        await call.answer(
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport\n"
        )





@router.callback_query(F.data == 'get_file')
async def giv_config(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
    data_state = await state.get_data()

    action_count = data_state.get('action_count', 0)
    action_count += 1

    if action_count > 1:
        await call.answer('ü•≥ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
        return

    await state.update_data(action_count=action_count)

    admin_id = os.getenv('ADMIN_ID')

    button_support = InlineKeyboardButton(
        text="ü§ù –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        callback_data='contact_support',
        url='https://t.me/ammosupport'
    )

    button_return_month = InlineKeyboardButton(
        text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞',
        callback_data='return_month'
    )

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [button_support],
        [button_return_month]
    ])


    data = data_state.get("actions")
    callb = {
        CashMenu.MOVEMENT_OPLATA: "1 –º–µ—Å—è—Ü",
        CashMenu.MOVEMENT_OPLATA_TWO: "2 –º–µ—Å—è—Ü–∞",
        CashMenu.MOVEMENT_OPLATA_TREE: "3 –º–µ—Å—è—Ü–∞",
    }

    if data in callb:
        value = callb[data]
        await call.answer()
        user = await db_session.execute(select(User).where(User.user_id == call.message.chat.id))
        result = user.scalar_one_or_none()

        if result:
            name_user = call.message.chat.full_name
            user_name = call.message.chat.username

            if not name_user or name_user.strip() == "":
                name_user = '—Å—Å—ã–ª–∫–∞'

            if user_name is None:
                clickable_user = markdown.hlink(f"{name_user}", f"tg://user?id={call.message.chat.id}")
            else:
                clickable_user = f"@{user_name}"

            await call.message.bot.send_message(
                chat_id=admin_id,
                text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clickable_user} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –Ω–∞ {markdown.hbold(value)},\n'
                f'{current_time}'
            )

            await call.message.answer(
                '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n'
                '‚åõ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.\n\n'
                '‚ú® –ï—Å–ª–∏ –≤–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                reply_markup=inline_kb
            )

            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clickable_user} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –Ω–∞ {value}')

    else:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {data}")


@router.callback_query(F.data == 'return_month')
async def returned_month(call: CallbackQuery):
    await purchase(call)