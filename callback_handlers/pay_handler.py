import logging

import asyncio
import os
from datetime import datetime, timezone
from typing import Union

import pytz
from aiogram import F
from aiogram.client import bot
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils import markdown
from aiogram import Router
from dotenv import load_dotenv
from environs import Env
from sqlalchemy import update
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

import settings
# from bd_api.middlewares.db_sql import info_month
from bd_api.middlewares.sa_tables import User, UserUpdater, Subscription, subscriber
from callback_handlers.callback_handlers import upsert_user, purchase
# from callback_handlers.pay_func.pay_yookassa import check_one, \
#     check_tree, check_two
from callback_handlers.pay_func.pay_yookassa import check
from keyboards.inline_keyboard.pay_inline_keyboard import CashCK, CashMenu, info_month

from keyboards.inline_keyboard.main_inline_keyboard import info, info3, info2, MainCD, Main
from utils.date_moscow import get_current_date
from utils.image_ import send_crcode, delete_code, admin_id

logger = logging.getLogger(__name__)
router = Router(name=__name__)
current_time = get_current_date(False)
load_dotenv()


@router.callback_query(CashCK.filter())
async def cash_ck(call: CallbackQuery, callback_data: CashCK, state: FSMContext, db_session: AsyncSession):
    await call.message.bot.send_chat_action(
        chat_id=call.message.chat.id,
        action=ChatAction.TYPING
    )
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ info_month

        subscription = info_month(
            price=0.0,
            month=0,
            description="",
            callback_data=callback_data,
            MOVEMENT_OPLATA=CashMenu.MOVEMENT_OPLATA,
            MOVEMENT_OPLATA_TWO=CashMenu.MOVEMENT_OPLATA_TWO,
            MOVEMENT_OPLATA_TREE=CashMenu.MOVEMENT_OPLATA_TREE
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ action —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ CashMenu
        if callback_data.action in [
            CashMenu.MOVEMENT_OPLATA,
            CashMenu.MOVEMENT_OPLATA_TWO,
            CashMenu.MOVEMENT_OPLATA_TREE
        ]:

            price, month, description = subscription.change_month_price()
            markup = await subscription.oplatas(call.message, db_session)
            print(month)


            await call.answer()
            await call.message.answer(
                text=(
                    f'{markdown.hbold(description)}\n\n'
                    '–í–∞—à —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω:'
                ),
                reply_markup=markup
            )

            await state.update_data(actions=callback_data.action, action_count=0,  count_payment=0, month=int(month))

        else:
            await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception as e:
        error_msg = f'–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}'
        await call.message.answer(
            f"{error_msg}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(lambda i: i.data.startswith('test_check_'))
async def check_handler(call: Union[CallbackQuery, Message], db_session: AsyncSession, state: FSMContext):
    user_id = call.from_user.id
    username = f"@{call.from_user.username}"

    data = await state.get_data()
    month = data.get("month")
    counting = data.get("count_payment", 0)

    if counting > 0:
        await call.message.answer(
            '‚úÖ –í—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n'
            '–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport')
        return

    if month is None:
        await call.answer("‚ùó –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã. –ü–≤–æ—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return

    await call.message.bot.send_chat_action(
        chat_id=call.message.chat.id,
        action=ChatAction.TYPING
    )

    try:
        await call.answer()
        if not call.data.startswith("test_check_"):
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback_data: {call.data}")
            await call.answer(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )
            return

        payment_id = call.data[len("test_check_"):]
        check_ = await check(payment_id, db_session, message_callback=call, month=month, date=get_current_date(True))

        if not check_:
            await call.message.answer(
                '‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚ùó\n\n'
                '–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,'
                '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport'
            )
            return

        await call.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await asyncio.sleep(0.5)
        name, id_img, sub = await send_crcode(call, db_session, user_id)

        if not sub:
            logger.error("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        start = 0
        end = 0
        for start_unpack, end_unpack in sub:
            start, end = start_unpack, end_unpack

        if id_img and name == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
            link = '–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞'
            await call.message.bot.send_message(
                chat_id = admin_id,
                text=
                f'–ï–±–∞—Ç—å —Ñ–æ—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —á–µ–ª –æ–ø–ª–∞—Ç–∏–ª –∞ –∏—Ö –Ω–µ—Ç –Ω–∞–ø–∏—à–∏ {username} –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ,\n'
                f'–µ–≥–æ {markdown.hlink(f"{link}", f"tg://user?id={user_id}")}\n'
                f'–û–Ω –æ–ø–ª–∞—Ç–∏–ª –Ω–∞ {markdown.hbold(month)} –º–µ—Å—è—Ü(-–∞) –≤ {get_current_date(True)}'
            )
            return

        await call.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: {markdown.hbold(end)}')
        await call.message.bot.send_message(
            chat_id=admin_id,
            text=
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª ‚§µÔ∏è\n\n'
            f'{markdown.hbold("–î–∞–Ω–Ω—ã–µ")}:\n'
            f'username: {username}\n'
            f'user_id: {user_id}\n'
            f'id QR-–∫–æ–¥–∞: {name}\n\n'
            f"{markdown.hbold('–í—Ä–µ–º—è')}:\n"
            f"–ö–æ–≥–¥–∞ –ø—Ä–æ—à–µ–ª –ø–ª–∞—Ç–µ–∂: {start}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {end}\n"
        )
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª:\n\n'                  
            f'username: {username}\n'
            f'user_id: {user_id}\n'
            f'ID –∫–æ–¥–∞: {name}\n'       
            f"–í—Ä–µ–º—è:\n"
            f"–í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞: {start}\n"
            f"–ö–æ–Ω—á–∞–µ—Ç—Å—è: {end}\n"
        )
        await delete_code(call, db_session, id_img)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}')
        await call.answer(
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @ammosupport\n"
        )


# @router.callback_query(F.data == 'get_file')
# async def giv_config(call: CallbackQuery, state: FSMContext, db_session: AsyncSession):
#     data_state = await state.get_data()
#
#     action_count = data_state.get('action_count', 0)
#     action_count += 1
#
#     if action_count > 1:
#         await call.answer('ü•≥ –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞')
#         return
#
#     await state.update_data(action_count=action_count)
#
#     admin_id = os.getenv('ADMIN_ID')
#
#     button_support = InlineKeyboardButton(
#         text="ü§ù –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
#         callback_data='contact_support',
#         url='https://t.me/ammosupport'
#     )
#
#     button_return_month = InlineKeyboardButton(
#         text='‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞',
#         callback_data='return_month'
#     )
#
#     inline_kb = InlineKeyboardMarkup(inline_keyboard=[
#         [button_support],
#         [button_return_month]
#     ])
#
#
#     data = data_state.get("actions")
#     callb = {
#         CashMenu.MOVEMENT_OPLATA: "1 –º–µ—Å—è—Ü",
#         CashMenu.MOVEMENT_OPLATA_TWO: "2 –º–µ—Å—è—Ü–∞",
#         CashMenu.MOVEMENT_OPLATA_TREE: "3 –º–µ—Å—è—Ü–∞",
#     }
#
#     if data in callb:
#         value = callb[data]
#         await call.answer()
#         user = await db_session.execute(select(User).where(User.user_id == call.message.chat.id))
#         result = user.scalar_one_or_none()
#
#         if result:
#             name_user = call.message.chat.full_name
#             user_name = call.message.chat.username
#
#             if not name_user or name_user.strip() == "":
#                 name_user = '—Å—Å—ã–ª–∫–∞'
#
#             if user_name is None:
#                 clickable_user = markdown.hlink(f"{name_user}", f"tg://user?id={call.message.chat.id}")
#             else:
#                 clickable_user = f"@{user_name}"
#
#             await call.message.bot.send_message(
#                 chat_id=admin_id,
#                 text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clickable_user} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –Ω–∞ {markdown.hbold(value)},\n'
#                 f'{current_time}'
#             )
#
#             await call.message.answer(
#                 '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n'
#                 '‚åõ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.\n\n'
#                 '‚ú® –ï—Å–ª–∏ –≤–∞–º —Å—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
#                 reply_markup=inline_kb
#             )
#
#             logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {clickable_user} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –Ω–∞ {value}')
#
#     else:
#         logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {data}")
#
#
# @router.callback_query(F.data == 'return_month')
# async def returned_month(call: CallbackQuery):
#     await purchase(call)