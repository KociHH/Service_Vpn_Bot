import logging
import os.path
import random
from settings import Config, load_path
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import markdown
from aiogram.filters import Command, StateFilter
from aiogram import Router
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

import settings
from FSM.sates import Admin
from bd_api.middlewares.sa_tables import User
from keyboards.inline_keyboard.main_inline_keyboard import Main_menu, return_kb_support
from keyboards.reply_keyboard.admin_panel import admin_kb, rassilka_kb, yes_no_kb

router = Router()
file_id = 'CAACAgIAAxkBAAENPehnSaTAff8Bp2seJXVgdaalTXS-lwACnA0AArrNuUrJQaN_QYSCkDYE'

# true admin if not admin false
def is_admin(message: Message) -> bool:
    return message.from_user.id in settings.Admins()

# main state if admin so admin panel
@router.message(Command('admin', prefix='/'))
async def admin(message: Message, state: FSMContext):
    await state.set_state(Admin.admin)
    if is_admin(message):
        await message.answer(
            'üîê –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!',
        reply_markup=rassilka_kb()
        )

# state handler
@router.message(F.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
async def rassilka(message: Message, state: FSMContext, db_session: AsyncSession):
    await state.set_state(Admin.rassilka)

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:',
        reply_markup=ReplyKeyboardRemove()
    )

# state handler
@router.message(StateFilter(Admin.rassilka))
async def edit_rassilka(message: Message, state: FSMContext, db_session: AsyncSession):
    await state.set_state(Admin.chek_rassilka)
    photo_id = message.photo[-1].file_id if message.photo else None
    gif_id = message.animation.file_id if message.animation else None
    await state.update_data({
        "text": message.text or None,
        "photo_id": photo_id,
        "caption": message.caption,
        "gif_id": gif_id
    })
    await message.answer(
        text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É [üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç]',
        reply_markup=yes_no_kb()
    )

samples = '________________________________'

# state handler
@router.message(StateFilter(Admin.chek_rassilka), F.text == '–î–∞')
async def rassilka_text(message: Message, state: FSMContext, db_session: AsyncSession):
    data = await state.get_data()
    text = data.get('text')
    photo_id = data.get('photo_id')
    caption = data.get('caption')
    gif_id = data.get('gif_id')
    print(text, caption)

    users_count = await db_session.execute(select(func.count(User.id)))
    total_users = users_count.scalar()

    sent_count = 0
    error_count = 0

    users = await db_session.execute(select(User.user_id))
    for user in users.scalars():
        try:
            if photo_id:
                await message.bot.send_photo(
                    chat_id=user,
                    photo=photo_id,
                    caption=caption or text,
                    reply_markup=ReplyKeyboardRemove()
                )

            elif gif_id:
                await message.bot.send_animation(
                     chat_id=user,
                     animation=gif_id,
                     caption=caption or text,

                )
            else:
                await message.bot.send_message(
                    chat_id=user,
                    text=text
                )
            sent_count += 1

        except Exception as e:
            error_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"{samples}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:„Ö§{markdown.hbold(str(total_users))}\n"
        f"{samples}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:„Ö§{markdown.hbold(str(sent_count))}\n"
        f"{samples}\n"
        f"‚ùå –û—à–∏–±–æ–∫:„Ö§{markdown.hbold(str(error_count))}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

# state handler
@router.message(StateFilter(Admin.chek_rassilka), F.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')
async def edit_text_rassilka(message: Message, state: FSMContext, db_session: AsyncSession):
    data = await state.get_data()
    photo_id = data.get('photo_id')
    text = data.get('text')
    caption = data.get('caption')
    gif_id = data.get('gif_id')

    if photo_id:
        await message.answer_photo(
            photo=photo_id,
            caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ:')}\n\n {caption or text}"
        )
    elif gif_id:
        await message.answer_animation(
            animation=gif_id,
            caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GIF:')}\n\n {caption or text}"
    )
    else:
        await message.answer(
            text=f'{markdown.hbold("–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")}\n\n{text}',
            reply_markup=ReplyKeyboardRemove()
        )

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:',
        reply_markup=ReplyKeyboardRemove()
    )

    await state.set_state(Admin.rassilka)


# the handler resets whether there is a state
@router.message(Command(commands=['start', 'help', 'admin']), StateFilter("*"))
async def handle_commands_in_state(message: Message, state: FSMContext):

    # words = ['‚ôª –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', '‚ùì –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ']
    # generator = dict(enumerate(words))
    #
    # def gen():
    #     keys = list(generator.keys())
    #     random_key = random.choice(keys)
    #
    #     return generator[random_key]
    #
    # result = gen()

    if message.text == '/start':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá'
    elif message.text == '/help':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá'
    elif message.text == '/admin':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ /admin üëá'
    else:
        result = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'

    try:
        current_state = await state.get_state()


        if current_state is not None:
            await state.clear()
            await message.answer(
                result,
                reply_markup=ReplyKeyboardRemove()
            )

        command_handlers = {
            '/admin': admin,
            '/start': start_handler,
            '/help': help
        }

        if handler := command_handlers.get(message.text):
            await handler(message)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {message.text}: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {message.text}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=ReplyKeyboardRemove()
        )


# handler
@router.message(Command('start', prefix='/'))
async def start_handler(message: Message):

    text = markdown.text(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "ü™ê –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å AMMO VPN:\n",
        "üåë I –ù–∞–¥–µ–∂–Ω—ã–π –∫–ª–∏–µ–Ω—Ç WireGuard\n",
        "üíª II –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n",
        "üîé III –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n",
        "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ –∏ –°–ë–ü",
        sep='\n',

    )

    await message.answer(text, reply_markup=Main_menu())

# handler
@router.message(Command('help', prefix='/'))
async def help(message: Message):
    await message.answer(
        'üí¨–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É AMMO VPN - @ammosupport',
        reply_markup=return_kb_support()
    )


path = "./img"
config: Config = load_path()
bot = Bot(config.tg_bot.token)


# saves the sent photo
@router.message(F.photo)
async def handle_photo(message: types.Message):

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)

    file_name = f"{file_info.file_unique_id}.png"
    file_path = os.path.join(path, file_name)

    if os.path.exists(file_path):
        print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –∏–º–µ–Ω–µ–º {file_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return


    await bot.download_file(file_info.file_path, destination=file_path)
    print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {file_name}!")
