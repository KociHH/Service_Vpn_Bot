import io
import logging
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils import markdown
from aiogram.filters import Command, StateFilter
from aiogram import Router
import asyncio
from settings import BotParams
from FSM.states import Admin, PaymentsUserState, NewSletterState
from db.tables import User, Subscription, Images, PaymentHistory
from keyboards.inline_keyboard.common import Main_menu, slide_kb
from keyboards.reply_keyboard.admin_panel import admin_kb, continue_bt, main_menu_kb, yes_no_kb, yes_no, exit_, payments_kb, change_content_send_bt, months_input_bt
from utils.load_image import ImageProcessing
from utils.other import samples_
from utils.work import url_support
from utils.other import create_slide_payments_bt, OperationNames
from sqlalchemy.ext.asyncio import AsyncSession
from kos_Htools.sql.sql_alchemy.dao import BaseDAO
from keyboards.reply_keyboard.buttons_names import MainButtons, NewsletterButtons, OtherEWhere, PaymentsUsers
from aiogram.utils.deep_linking import decode_payload, create_start_link
from aiogram.client.bot import DefaultBotProperties
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAnimation

router = Router()
logger = logging.getLogger(__name__)


def is_admin(message: Message) -> bool:
    return str(message.from_user.id) in [admin_id.strip() for admin_id in BotParams.admin_ids_str.split(',')]


@router.message(F.text.func(lambda t: t and t.startswith("/start") and len(t) >= 10))
async def start_deep_link(message: Message, db_session: AsyncSession):
    args = message.text.split(maxsplit=1)

    if len(args) < 2:
        await start_handler(message, db_session)
        return
    
    happening = args[1]
    if happening:
        if happening.startswith(f"{OperationNames.payments_user}_"):
            user_id = int(happening.split("_")[1])

            if str(message.from_user.id) not in BotParams.admin_ids_str:
                return

            await create_slide_payments_bt(
                db_session,
                user_id,
                message,
                1,
                OperationNames.payments_user,
            )


@router.message(F.text == OtherEWhere.back, StateFilter("*"))
async def back(message: Message, state: FSMContext):
    await admin(message=message, state=state)


@router.message(Command('admin', prefix='/'))
async def admin(message: Message, state: FSMContext):
    await state.set_state(Admin.admin)
    if is_admin(message):
        await message.answer(
            'üîê –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!',
        reply_markup=main_menu_kb()
        )


@router.message(F.text == MainButtons.check_images, StateFilter(Admin.admin))
async def check_image(message: Message, db_session: AsyncSession):
    image_utils = ImageProcessing(db_session)
    await image_utils.count_images_db(message)


@router.message(F.text == MainButtons.load_files, StateFilter(Admin.admin))
async def files(message: Message, state: FSMContext):
    await state.set_state(Admin.file)
    await message.answer(
        text=f"‚õîÔ∏è –£—Ç–æ—á–Ω–µ–Ω–∏–µ ‚õîÔ∏è\n"
             f" - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞: {markdown.hbold('.rar')} –∏–ª–∏ {markdown.hbold('.zip')}.\n"
             f" - –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –∑–∞ —Ä–∞–∑.\n"
             f" - –§–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á—Ç–æ —Ç–æ –∫—Ä–æ–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
             f" - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è.\n"
             f" - –õ–∏–º–∏—Ç –Ω–∞ –∞—Ä—Ö–∏–≤ 10 –º–±",
        reply_markup=exit_()
    )
    await message.answer(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:"
    )


@router.message(StateFilter(Admin.file))
async def check_file(message: Message, state: FSMContext):
    MAX_FILE_SIZE = 10 * 1024 * 1024
    doc = message.document
    if message.photo and message.photo[-1]:
        await message.answer(
            text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å —Ñ–∞–π–ª–æ–º."
        )
    elif message.text:
        await message.answer(
            text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å —Ñ–∞–π–ª–æ–º."
        )
    elif doc:
        if doc.file_name.endswith(('.rar', '.zip')):
            if doc.file_size > MAX_FILE_SIZE:
                await message.answer(text="–Ø –∂–µ –≥–æ–≤–æ—Ä–∏–ª –Ω–µ –±–æ–ª—å—à–µ 10 –º–±, –∏–∑–º–µ–Ω—è–π")
                return

            file_id = doc.file_id
            file_name = doc.file_name
            if file_id and file_name:
                file = await message.bot.get_file(file_id)
                file_stream = io.BytesIO()
                await message.bot.download_file(file.file_path, file_stream)
                file_bytes = file_stream.getvalue()

                await state.update_data(
                    {
                    "file_bytes": file_bytes,
                    'file_name': file_name
                })
                await state.set_state(Admin.check_file)
                await message.answer(
                    text="–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª?",
                    reply_markup=yes_no()
            )
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
        else:
            await message.answer(
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞."
            )
    else:
        await message.answer(
            text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞."
        )


@router.message(F.text == '–î–∞', StateFilter(Admin.check_file))
async def check_yes(message: Message, state: FSMContext, db_session: AsyncSession):
    img_data = await state.get_data()
    file_bytes = img_data.get('file_bytes')
    file_name = img_data.get('file_name')

    if file_bytes and file_name:
        image_utils = ImageProcessing(db_session)
        images, i = await image_utils.image_extract(
            file_bytes=file_bytes, 
            file_name=file_name, 
            message=message, 
            )
        if images:
            await image_utils.save_img_to_db(images)
            await message.answer(
                f'‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ö–æ–ª-–≤–æ: {markdown.hbold(i)}',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(
                text='‚ùóÔ∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            text='‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.',
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()


@router.message(F.text == '–ù–µ—Ç', StateFilter(Admin.check_file))
async def check_no(message: Message, state: FSMContext):
    await files(message, state)


@router.message(F.text == MainButtons.newsletter, StateFilter(Admin.admin))
async def rassilka(message: Message, state: FSMContext,):
    await state.set_state(NewSletterState.rassilka)
    await state.update_data(media_group_items=[], media_items=[], text=None, caption=None)

    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª, –≤–∏–¥–∏–æ, GIF –∏ —Ç–¥. —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
        '‚ùóÔ∏è –í–∞–∂–Ω–æ: ‚ùóÔ∏è\n'
        f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ {markdown.hbold('–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ')} –∏—Ö, –∞ —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–µ—Ä–≤–æ–µ –Ω–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–¥–∏—è.\n'
        f'–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {markdown.hbold("–¥–æ–∫—É–º–µ–Ω—Ç–∞/—Ñ–∞–π–ª–∞")} –∏ —Ç–¥. —Å {markdown.hbold("—Ñ–æ—Ç–æ/–≤–∏–¥–∏–æ")}, —Ç–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ {markdown.hbold("–Ω–µ")} –ø—Ä–æ–π–∑–æ–π–¥–µ—Ç!\n'
        f"–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {markdown.hbold('–¥–æ–∫—É–º–µ–Ω—Ç–∞/—Ñ–∞–π–ª–∞')} –±–æ–ª—å—à–µ {markdown.hbold('1')} –∏ —Ç–¥. —Å –ø–æ–¥–ø–∏—Å—å—é, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è {markdown.hbold('–ø–æ–¥–ø–∏—Å—å!')}",
        reply_markup=exit_()
    )


@router.message(StateFilter(NewSletterState.rassilka, NewSletterState.change_text_caption))
async def edit_rassilka(message: Message, state: FSMContext):
    updated_state_data = {}
    state_data = await state.get_data()
    media_items_data: dict | None = state_data.get("media_items")

    if message.media_group_id:
        media_group_items = (await state.get_data()).get('media_group_items', [])
        
        media_items = None
        if message.photo:
            media_items = {'type': 'photo', 'file_id': message.photo[-1].file_id}
        elif message.animation:
            media_items = {'type': 'animation', 'file_id': message.animation.file_id}
        elif message.document:
            media_items = {'type': 'document', 'file_id': message.document.file_id}
        elif message.video:
            media_items = {'type': 'video', 'file_id': message.video.file_id}
        
        if media_items:
            media_group_items.append(media_items)
            current_caption = (await state.get_data()).get('caption')
            new_caption = message.caption if message.caption is not None else (current_caption if current_caption is not None else "")
            await state.update_data({'media_group_items': media_group_items, 'caption': new_caption})
            await state.set_state(NewSletterState.waiting_for_media_group_end)
            await message.answer(
                "‚úÖ –í—Å–µ –º–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã.\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n",
                reply_markup=continue_bt()
                )
    else:
        if not media_items_data:
            current_media_items = []

            if message.photo:
                current_media_items.append({'type': 'photo', 'file_id': message.photo[-1].file_id})
            if message.animation:
                current_media_items.append({'type': 'animation', 'file_id': message.animation.file_id})
            if message.document:
                current_media_items.append({'type': 'document', 'file_id': message.document.file_id})
            if message.video:
                current_media_items.append({'type': 'video', 'file_id': message.video.file_id})
        else:
            current_media_items = media_items_data

        if current_media_items:
            caption_changed = None
            if await state.get_state() == NewSletterState.change_text_caption:
                caption_changed = message.text

            updated_state_data['media_items'] = current_media_items
            updated_state_data['caption'] = message.caption or caption_changed
            updated_state_data['text'] = None
            logger.info(f"[edit_rassilka] –û–¥–∏–Ω–æ—á–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª. medi-items: {current_media_items}, caption: {updated_state_data['caption']}")
        elif message.text is not None:
            updated_state_data['text'] = message.text
            updated_state_data['media_items'] = []
            updated_state_data['caption'] = None
            logger.info(f"[edit_rassilka] –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. text: {updated_state_data['text']}")
        
        await state.update_data(updated_state_data)

        await message.answer(
            text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: {NewsletterButtons.change_message}',
            reply_markup=yes_no_kb()
        )
        await state.set_state(NewSletterState.check_rassilka)


@router.message(StateFilter(NewSletterState.waiting_for_media_group_end), F.media_group_id.is_not(None))
async def handle_media_group_items(message: Message, state: FSMContext):
    state_data = await state.get_data()
    media_group_items = state_data.get('media_group_items', [])

    media_items = None
    if message.photo:
        media_items = {'type': 'photo', 'file_id': message.photo[-1].file_id}
    elif message.animation:
        media_items = {'type': 'animation', 'file_id': message.animation.file_id}
    elif message.document:
        media_items = {'type': 'document', 'file_id': message.document.file_id}
    elif message.video:
        media_items = {'type': 'video', 'file_id': message.video.file_id}

    if media_items:
        media_group_items.append(media_items)
        current_caption = state_data.get('caption')
        new_caption = message.caption if message.caption is not None else (current_caption if current_caption is not None else "")
        await state.update_data({
            'media_group_items': media_group_items, 
            'caption': new_caption
            })


@router.message(StateFilter(NewSletterState.waiting_for_media_group_end), F.media_group_id.is_(None))
async def finalize_media_group(message: Message, state: FSMContext):
    full_data = await state.get_data()
    media_group_items = full_data.get('media_group_items', [])
    caption = full_data.get('caption')

    if media_group_items:
        await state.update_data({
            'media_items': media_group_items,
            'text': None,
            'caption': caption
        })
        await state.set_state(NewSletterState.check_rassilka)
        await message.answer(
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: {NewsletterButtons.change_message}",
            reply_markup=yes_no_kb()
        )
    else:
        await state.set_state(NewSletterState.rassilka)


@router.message(StateFilter(NewSletterState.check_rassilka), F.text == '–î–∞')
async def rassilka_text(message: Message, state: FSMContext, db_session: AsyncSession):
    data = await state.get_data()
    text = data.get('text')
    media_items = data.get('media_items', [])
    caption = data.get('caption')

    sent_count = 0
    error_count = 0

    user_dao = BaseDAO(User, db_session)
    all_users_ids = await user_dao.get_all_column_values(User.user_id)
    total_users = len(all_users_ids)
    for user_id_single in all_users_ids:
        await asyncio.sleep(0.2)
        try:
            if media_items:
                if len(media_items) > 1:
                    media_group = []
                    for i, media in enumerate(media_items):
                        if media['type'] == 'photo':
                            media_group.append(InputMediaPhoto(media=media['file_id'], caption=caption or text if i == 0 else None))
                        elif media['type'] == 'animation':
                            media_group.append(InputMediaAnimation(media=media['file_id'], caption=caption or text if i == 0 else None))
                        elif media['type'] == 'video':
                            media_group.append(InputMediaVideo(media=media['file_id'], caption=caption or text if i == 0 else None))
                        elif media['type'] == 'document':
                            media_group.append(InputMediaDocument(media=media['file_id'], caption=caption or text if i == 0 else None))
                    await message.bot.send_media_group(
                        chat_id=user_id_single,
                        media=media_group
                    )
                else:
                    first_media = media_items[0]
                    if first_media['type'] == 'photo':
                        await message.bot.send_photo(
                            chat_id=user_id_single,
                            photo=first_media['file_id'],
                            caption=caption or text,
                            reply_markup=ReplyKeyboardRemove()
                        )
                    elif first_media['type'] == 'animation':
                        await message.bot.send_animation(
                             chat_id=user_id_single,
                             animation=first_media['file_id'],
                             caption=caption or text,
                        )
                    elif first_media['type'] == 'video':
                        await message.bot.send_video(
                            chat_id=user_id_single,
                            video=first_media['file_id'],
                            caption=caption or text,
                        )
                    elif first_media['type'] == 'document':
                        await message.bot.send_document(
                            chat_id=user_id_single,
                            document=first_media['file_id'],
                            caption=caption or text,
                        )
            elif text:
                await message.bot.send_message(
                    chat_id=user_id_single,
                    text=text
                )
            sent_count += 1

        except Exception as e:
            error_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_single}: {e}")

    result_text = [
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n",
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:„Ö§{markdown.hbold(str(total_users))}\n",
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:„Ö§{markdown.hbold(str(sent_count))}\n",
        f"‚ùå –ù–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ:„Ö§{markdown.hbold(str(error_count))}",
    ]

    await message.answer(
        samples_(result_text),
        reply_markup=main_menu_kb()
    )
    await state.set_state(Admin.admin)


@router.message(F.text.in_([NewsletterButtons.change_text, NewsletterButtons.change_all]), StateFilter(NewSletterState.change_content))
async def change_text_newsletter(message: Message, state: FSMContext):
    text_bt = message.text
    full_data = await state.get_data()
    media_items = full_data.get('media_items', [])
    text = full_data.get('text')
    caption = full_data.get('caption')

    if media_items:
        if len(media_items) > 1:
            media_group = []
            for i, media in enumerate(media_items):
                if media['type'] == 'photo':
                    media_group.append(InputMediaPhoto(media=media['file_id'], caption=caption or text if i == 0 else None))
                elif media['type'] == 'animation':
                    media_group.append(InputMediaAnimation(media=media['file_id'], caption=caption or text if i == 0 else None))
                elif media['type'] == 'video':
                    media_group.append(InputMediaVideo(media=media['file_id'], caption=caption or text if i == 0 else None))
                elif media['type'] == 'document':
                    media_group.append(InputMediaDocument(media=media['file_id'], caption=caption or text if i == 0 else None))
            await message.bot.send_media_group(
                chat_id=message.from_user.id,
                media=media_group
            )
        else:
            first_media = media_items[0]
            if first_media['type'] == 'photo':
                await message.answer_photo(
                    photo=first_media['file_id'],
                    caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ:')}\n\n {caption or text}",
                )
            elif first_media['type'] == 'animation':
                await message.answer_animation(
                    animation=first_media['file_id'],
                    caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GIF:')}\n\n {caption or text}",
                )
            elif first_media['type'] == 'video':
                await message.answer_video(
                    video=first_media['file_id'],
                    caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ:')}\n\n {caption or text}",
                )
            elif first_media['type'] == 'document':
                await message.answer_document(
                    document=first_media['file_id'],
                    caption=f"{markdown.hbold('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º:')}\n\n {caption or text}",
                )
    elif text:
        await message.answer(
            text=f'{markdown.hbold("–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")}\n\n{text}',
        )

    if text_bt == NewsletterButtons.change_text:
        await message.answer(
            '–ü—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–Ω—ã–π —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
            reply_markup=ReplyKeyboardRemove()
        )

        await state.update_data({
            "media_items": media_items,
        })

    if text_bt == NewsletterButtons.change_all:
        await message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–¥–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é –ª–∏–±–æ –±–µ–∑:",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.set_state(NewSletterState.change_text_caption)


@router.message(StateFilter(NewSletterState.check_rassilka), F.text == NewsletterButtons.change_message)
async def edit_text_rassilka(message: Message, state: FSMContext):
    full_data = await state.get_data()
    media_items = full_data.get('media_items', [])
    text = full_data.get('text')
    caption = full_data.get('caption')

    await message.answer(
        text=
        f"{NewsletterButtons.change_text}:\n"
        "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏—è –Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞ —Ç–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–±—Ä–æ—Å—è—Ç—Å—è.\n\n"
        f"{NewsletterButtons.change_all}:\n"
        "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞, –¥–ª—è –≥—Ä—è–¥—É—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
        reply_markup=change_content_send_bt()
    )

    await state.update_data({
        "media_items": media_items,
        "text": text,
        "caption": caption,
    })
    await state.set_state(NewSletterState.change_content)


@router.message(F.text == MainButtons.info_payments, StateFilter(Admin.admin))
async def output_users(message: Message, state: FSMContext):
    await message.answer(
        text=
        f"{PaymentsUsers.user_payments}:\n"
        f"–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ {markdown.hbold("id")} –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∫—Ç–æ –¥–µ–ª–∞–ª –ø–ª–∞—Ç–µ–∂–∏.\n"
        f"–ù–∞–∂–∏–º–∞—è –Ω–∞ —Å—Å—ã–ª–∫—É –≤–≤–∏–¥–µ –µ–≥–æ {markdown.hbold('id')}, —Ç–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
        f"{PaymentsUsers.all_payments}:\n"
        f"–ü—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ {markdown.hbold('–≤—Å–µ—Ö')} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.\n\n"
        f"{PaymentsUsers.filter_amount_date}:\n"
        f"–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–µ—Å—è—Ü–∞–º/–≥–æ–¥–∞–º.\n",
        reply_markup=payments_kb(),
    )
    await state.set_state(PaymentsUserState.payments_menu)


@router.message(F.text == PaymentsUsers.filter_amount_date, StateFilter(PaymentsUserState.filter_amount_month))
async def filter_processing(message: Message, state: FSMContext):
    await message.answer(
        text=
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≥–æ–¥—É.\n",
        reply_markup=months_input_bt()
        )
    await state.set_state(PaymentsUserState.filter_month)

@router.message(F.text == PaymentsUsers.all_payments, StateFilter(PaymentsUserState.payments_menu))
async def all_payments_processing(message: Message, db_session: AsyncSession):
    pay_dao = BaseDAO(PaymentHistory, db_session)
    check_users = await pay_dao.get_all_column_values(PaymentHistory.user_id)

    if not check_users:
        await message.answer(text="ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç —é–∑–µ—Ä–æ–≤.")
        return

    await create_slide_payments_bt(
        db_session,
        None,
        message,
        1,
        OperationNames.all_payments_users,
    )


@router.message(F.text == PaymentsUsers.user_payments, StateFilter(PaymentsUserState.payments_menu))
async def user_payments_processing(message: Message, db_session: AsyncSession):
    pay_dao = BaseDAO(PaymentHistory, db_session)
    check_users = await pay_dao.get_all_column_values(PaymentHistory.user_id)

    if not check_users:
        await message.answer(text="ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç —é–∑–µ—Ä–æ–≤.")
        return

    await create_slide_payments_bt(
        db_session,
        None,
        message,
        1,
        OperationNames.uids_payments_link,
    )


@router.message(Command(commands=['help', 'admin', 'status', 'start']), StateFilter("*"))
async def handle_commands_in_state(message: Message, state: FSMContext, db_session: AsyncSession):

    if message.text == '/start':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá'
    elif message.text == '/help':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëá'
    elif message.text == '/admin':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ /admin üëá'
    elif message.text == '/status':
        result = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üëá'
    else:
        result = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'

    try:
        current_state = await state.get_state()


        if current_state is not None:
            await state.clear()
            await message.answer(
                result,
                reply_markup=ReplyKeyboardRemove()
            )

        command_handlers = {
            '/admin': admin,
            '/start': start_handler,
            '/help': help_command,
            '/status': status_command,
        }

        if handler := command_handlers.get(message.text):
            if message.text in ['/admin', '/start', '/status', '/help']:
                if message.text == '/admin':
                    await handler(message, state)
                elif message.text in ['/start', "/status"]:
                    await handler(message, db_session)
                elif message.text == '/help':
                    await handler(message)
        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã {message.text}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã",
            reply_markup=ReplyKeyboardRemove()
        )

async def status_admin(user_id: int) -> str:
    user_id = str(user_id)

    if user_id in BotParams.admin_ids_str:
        return 'admin'
    return 'user'


@router.message(Command('start', prefix='/'))
async def start_handler(message: Message, db_session: AsyncSession):
    user_id = message.from_user.id
    name_user = message.from_user.full_name
    username = message.from_user.username

    user_dao = BaseDAO(User, db_session)
    existing = await user_dao.get_one(User.user_id == user_id)

    user_save = {
        "user_name": username if username else "–ù–µ —É–∫–∞–∑–∞–Ω",
        "full_name": name_user or "–ù–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫",
        "admin_status": await status_admin(user_id),
    }

    if existing:
        updater = await user_dao.update(
            User.user_id == user_id,
            user_save,
        )
        if not updater:
            logger.error(f"–ù–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —é–∑–µ—Ä {user_id}")
            return

    else:
        user_save["user_id"] = user_id
        user_create = await user_dao.create(user_save)
        if not user_create:
            logger.error(f"–ù–µ —Å–æ–∑–¥–∞–ª—Å—è —é–∑–µ—Ä {user_id}")
            return

    text = markdown.text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n\n"
        f"üóùÔ∏è –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å {BotParams.name_project}:\n",
        "üåë I –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 10 –ì–±–∏—Ç/—Å\n",
        "üëÅ‚Äçüó® II –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ IP-–∞–¥—Ä–µ—Å–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n",
        "üíª III –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n",
        "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§ –∏ –°–ë–ü",
        sep='\n',
    )

    await message.answer(text, reply_markup=Main_menu())


@router.message(Command('status', prefix='/'))
async def status_command(message: Message, db_session: AsyncSession):
    chat_id = message.from_user.id

    sub_dao = BaseDAO(Subscription, db_session)
    subscription = await sub_dao.get_one(Subscription.user_id == chat_id)

    if subscription:
        l = [
            "üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:",
            f"üóì –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã: {markdown.hcode(subscription.start_date)}",
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {markdown.hcode(subscription.end_date)}",
            f"üìå –í–∞—à —Å—Ç–∞—Ç—É—Å: {markdown.hcode('–ê–∫—Ç–∏–≤–Ω—ã–π' if subscription.status == 'active' else '–ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π')}"]
        await message.answer(
            samples_(l)
        )
    else:
        await message.answer('üßê –í—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø–æ–ª—å–∑—É—é—Ç–µ—Å—å (–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å) –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏.')


@router.message(Command('help', prefix='/'))
async def help_command(message: Message):
    await message.answer(
        text=markdown.text(
            f'üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {markdown.hlink(title=BotParams.name_project, url=url_support)}\n\n',
        ),
    )
            